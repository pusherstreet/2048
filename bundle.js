!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);r(5);new class{constructor(t){this.containerHtml=t,this.drawTable(),this.colorDictionary=this.getColorDictionary(),this.init(),document.onkeydown=(t=>{this.move(t.keyCode)})}init(){this.initArray(),this.wasShift=!0,this.fillTable()}initArray(){this.array=[];for(let t=0;t<4;t++){let t=[];for(let e=0;e<4;e++)t.push(0);this.array.push(t)}}drawTable(){if(this.containerHtml){let t=document.createElement("table");t.classList.add("board"),t.style.border="1px solid black";for(let e=0;e<4;e++){let e=document.createElement("tr");for(let t=0;t<4;t++){let t=document.createElement("td");t.style.textAlign="center",t.style.verticalAlign="middle",t.style.height="100px",t.style.width="100px",t.style.fontSize="22px",e.appendChild(t)}t.appendChild(e)}this.containerHtml.appendChild(t),this.table=t}}fillTable(){let t=this.getOpenPositions();if(!t.length&&this.isDeadlock()){let t=this.array.reduce((t,e)=>{let r=e.reduce((t,e)=>t<e?e:t,0);return r>t?r:t},0);alert("Your score is "+t),this.init()}else{this.wasShift&&this.generateNumber(t);for(let t=0;t<4;t++){let e=this.table.querySelectorAll("tr")[t];for(let r=0;r<4;r++){let n=e.querySelectorAll("td")[r],i=this.array[t][r];n.style.backgroundColor=0!=i?this.colorDictionary[Math.log2(i)-1]:"rgb(255, 255, 255)",n.innerText=i||""}}}}move(t){switch([37,38,39,40].includes(t)&&(this.wasShift=!1),t){case 37:for(let t=0;t<4;t++){let e=this.array[t];this.array[t]=this.shift(this.sum(e,"L"),"L")}this.fillTable();break;case 38:for(let t=0;t<4;t++){let e=[];for(let r=0;r<4;r++)e.push(this.array[r][t]);e=this.shift(this.sum(e,"L"),"L");for(let r=0;r<4;r++)this.array[r][t]=e[r]}this.fillTable();break;case 39:for(let t=0;t<4;t++){let e=this.array[t];this.array[t]=this.shift(this.sum(e,"R"),"R")}this.fillTable();break;case 40:for(let t=0;t<4;t++){let e=[];for(let r=0;r<4;r++)e.push(this.array[r][t]);e=this.shift(this.sum(e,"R"),"R");for(let r=0;r<4;r++)this.array[r][t]=e[r]}this.fillTable()}}sum(t,e){switch(e){case"L":for(var r=0;r<4;){if(t[r]){let e=r+1;for(;e<4;){if(t[e]){t[r]==t[e]&&(t[r]*=2,t[e]=0);break}e++}}r++}break;case"R":for(r=3;r>0;){if(t[r]){let e=r-1;for(;e>=0;){if(t[e]){t[r]==t[e]&&(t[r]*=2,t[e]=0);break}e--}}r--}}return t}shift(t,e){switch(e){case"R":t=t.sort((t,e)=>(!e&&t&&(this.wasShift=!0),!e&&t?1:0));break;case"L":t=t.sort((t,e)=>(!t&&e&&(this.wasShift=!0),!t&&e?1:0))}return t}generateNumber(t){if(t.length){let e=Math.random()>.5?2:4,r=Math.floor(Math.random()*t.length),n=t[r][0],i=t[r][1];this.array[n][i]=e}}getOpenPositions(){let t=[];for(let e=0;e<4;e++)for(let r=0;r<4;r++)this.array[e][r]||t.push([e,r]);return t}isDeadlock(){for(let t=0;t<4;t++)for(let e=0;e<4;e++){if(3!=e&&this.array[t][e]===this.array[t][e+1])return!1;if(3!=t&&this.array[t][e]==this.array[t+1][e])return!1}return!0}getColorDictionary(){let t=105,e=[];for(let r=0;r<30;r++){let n=20*r;if(n>450)e.push("rgb(255, 255, 255)");else if(n<=150){let r=`rgb(${t+n}, 105, 105)`;e.push(r)}else if(n>150&&n<=300){let r=`rgb(105, ${t+(n-=150)}, 105)`;e.push(r)}else n-=300}return e}}(document.getElementById("root"))},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var r=e.protocol+"//"+e.host,n=r+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?r+o:n+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,e,r){var n,i,o={},s=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=n.apply(this,arguments)),i}),a=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var r=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),l=null,f=0,c=[],u=r(1);function h(t,e){for(var r=0;r<t.length;r++){var n=t[r],i=o[n.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](n.parts[s]);for(;s<n.parts.length;s++)i.parts.push(v(n.parts[s],e))}else{var a=[];for(s=0;s<n.parts.length;s++)a.push(v(n.parts[s],e));o[n.id]={id:n.id,refs:1,parts:a}}}}function p(t,e){for(var r=[],n={},i=0;i<t.length;i++){var o=t[i],s=e.base?o[0]+e.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};n[s]?n[s].parts.push(a):r.push(n[s]={id:s,parts:[a]})}return r}function d(t,e){var r=a(t.insertInto);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=c[c.length-1];if("top"===t.insertAt)n?n.nextSibling?r.insertBefore(e,n.nextSibling):r.appendChild(e):r.insertBefore(e,r.firstChild),c.push(e);else if("bottom"===t.insertAt)r.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=a(t.insertInto+" "+t.insertAt.before);r.insertBefore(e,i)}}function b(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function y(t){var e=document.createElement("style");return t.attrs.type="text/css",m(e,t.attrs),d(t,e),e}function m(t,e){Object.keys(e).forEach(function(r){t.setAttribute(r,e[r])})}function v(t,e){var r,n,i,o;if(e.transform&&t.css){if(!(o=e.transform(t.css)))return function(){};t.css=o}if(e.singleton){var s=f++;r=l||(l=y(e)),n=x.bind(null,r,s,!1),i=x.bind(null,r,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=function(t){var e=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",m(e,t.attrs),d(t,e),e}(e),n=function(t,e,r){var n=r.css,i=r.sourceMap,o=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||o)&&(n=u(n));i&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,r,e),i=function(){b(r),r.href&&URL.revokeObjectURL(r.href)}):(r=y(e),n=function(t,e){var r=e.css,n=e.media;n&&t.setAttribute("media",n);if(t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}.bind(null,r),i=function(){b(r)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var r=p(t,e);return h(r,e),function(t){for(var n=[],i=0;i<r.length;i++){var s=r[i];(a=o[s.id]).refs--,n.push(a)}t&&h(p(t,e),e);for(i=0;i<n.length;i++){var a;if(0===(a=n[i]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete o[a.id]}}}};var g,w=(g=[],function(t,e){return g[t]=e,g.filter(Boolean).join("\n")});function x(t,e,r,n){var i=r?"":n.css;if(t.styleSheet)t.styleSheet.cssText=w(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var r=function(t,e){var r=t[1]||"",n=t[3];if(!n)return r;if(e&&"function"==typeof btoa){var i=(s=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),o=n.sources.map(function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"});return[r].concat(o).concat([i]).join("\n")}var s;return[r].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+r+"}":r}).join("")},e.i=function(t,r){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(n[o]=!0)}for(i=0;i<t.length;i++){var s=t[i];"number"==typeof s[0]&&n[s[0]]||(r&&!s[2]?s[2]=r:r&&(s[2]="("+s[2]+") and ("+r+")"),e.push(s))}},e}},function(t,e,r){(t.exports=r(3)(!1)).push([t.i,".board tr td{\r\n    border: 1px solid black;\r\n}\r\n.board{\r\n    border-collapse: collapse;\r\n}",""])},function(t,e,r){var n=r(4);"string"==typeof n&&(n=[[t.i,n,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};r(2)(n,i);n.locals&&(t.exports=n.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,